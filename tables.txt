#
# TABLES
#

# Access Levels: 0(User), 1(Librarian), 2(DBA)
DROP TABLE IF EXISTS user_type;
CREATE TABLE user_type (
accesslevel INT,
description VARCHAR(512),
PRIMARY KEY (accesslevel));

DROP TABLE IF EXISTS user;
CREATE TABLE user (
name VARCHAR(50),
email VARCHAR(50),
phone VARCHAR(12),
active_loan INT DEFAULT 0,
fee DOUBLE DEFAULT 0.0,
password CHAR(128) NOT NULL,
salt CHAR(32) NOT NULL,
accesslevel INT REFERENCES user_type(accesslevel),
last_login DATE,
PRIMARY KEY (email));

DROP TABLE IF EXISTS user_archive;
CREATE TABLE user_archive (
name VARCHAR(50),
email VARCHAR(50),
phone VARCHAR(12),
active_loan INT DEFAULT 0,
fee DOUBLE DEFAULT 0.0,
password CHAR(128) NOT NULL,
salt CHAR(32) NOT NULL,
accesslevel INT REFERENCES user_type(accesslevel),
last_login DATE,
PRIMARY KEY (email));

DROP TABLE IF EXISTS book;
CREATE TABLE book (
bid INT,
title VARCHAR(50),
author VARCHAR(50),
pub_date DATE,
edition INT,
copies INT DEFAULT 0,
available INT DEFAULT 0,
PRIMARY KEY (bid));

DROP TABLE IF EXISTS loan;
CREATE TABLE loan (
bid INT,
email VARCHAR(50),
overdue BOOLEAN,
loan_date DATE,
due_date DATE,
return_date DATE,
PRIMARY KEY (loan_date),
FOREIGN KEY (bid) REFERENCES book(bid),
FOREIGN KEY (email) REFERENCES user(email));

DROP TABLE IF EXISTS review;
CREATE TABLE review (
bid INT REFERENCES book(bid),
email VARCHAR(50) REFERENCES user(email),
rating_date DATE,
stars INT DEFAULT 0,
comment VARCHAR(512) DEFAULT "No comment");

# Statuses: C (Cancelled), N (Nonavailability), P (Picked up), W (Waiting for pickup)
DROP TABLE IF EXISTS reservation;
CREATE TABLE reservation (
reservation_id INT NOT NULL AUTO_INCREMENT,
bid INT REFERENCES book(bid),
email VARCHAR(50) REFERENCES user(email),
reserve_date DATE,
avail_date DATE,
status CHAR(1) DEFAULT "N",
PRIMARY KEY (reservation_id));

#
# VIEWS
#

DROP VIEW IF EXISTS overdue_users;
CREATE VIEW overdue_users AS
SELECT name, email, bid, title, overdue, loan_date, due_date FROM user NATURAL JOIN loan NATURAL JOIN book
WHERE overdue = True
ORDER BY name, email, bid;

DROP VIEW IF EXISTS debtors;
CREATE VIEW debtors AS
SELECT name, email, fee FROM user WHERE fee > 0 
ORDER BY name, fee;

DROP VIEW IF EXISTS reserved_books;
CREATE VIEW reserved_books AS
SELECT name, email, bid, title, author, edition, reserve_date
FROM reservation NATURAL JOIN user NATURAL JOIN book
ORDER BY reservation_id;

DROP VIEW IF EXISTS available_books;
CREATE VIEW available_books AS
SELECT * FROM book where available > 0
ORDER BY title, author;

DROP VIEW IF EXISTS highest_rated_books;
CREATE VIEW highest_rated_books AS
SELECT bid, title, author, edition, email, stars, comment
FROM review NATURAL JOIN book
ORDER BY stars DESC, title, author, edition;

#
# PROCEDURES
#

# Perform daily maintenance
DROP PROCEDURE IF EXISTS perform_maintenance;
DELIMITER $$
CREATE PROCEDURE perform_maintenance()
BEGIN
    # Archive users when they are inactive for 1 year
    INSERT INTO user_archive
        (SELECT * FROM user WHERE ADDDATE(last_login, 365) < CURRENT_DATE AND active_loan = 0);
    DELETE FROM user WHERE email IN (SELECT email from user_archive);

    # Cancel reservations not picked up after 5 days
    UPDATE reservation SET status = "C" WHERE ADDDATE(avail_date, 5) < CURRENT_DATE AND status = "W";

    ##################### ONLY FOR SIMULATION #######################
    # Assume users picked up their reserved books
    UPDATE reservation SET status = "P" WHERE status = "W";
END$$
DELIMITER ;

# Handle login and moving users out of archive
DROP PROCEDURE IF EXISTS login;
DELIMITER $$
CREATE PROCEDURE login(IN email VARCHAR(50), IN password VARCHAR(128))
BEGIN
    IF (email, password) IN (SELECT email, password FROM user) THEN
        UPDATE user SET last_login = CURRENT_DATE;
        SELECT email, accesslevel FROM user WHERE user.email = email;
    ELSEIF (email, password) IN (SELECT email, password FROM user_archive) THEN
        INSERT INTO user (SELECT * FROM user_archive WHERE user.email = email);
        DELETE FROM user_archive WHERE user.email = email;
        UPDATE user SET last_login = CURRENT_DATE;
        SELECT email, accesslevel FROM user WHERE user.email = email;
    END IF;
END$$
DELIMITER ;

# Handle creating book reservations. Maximum of 3 reservations per user.
DROP PROCEDURE IF EXISTS create_reservation;
DELIMITER $$
CREATE PROCEDURE create_reservation(IN email VARCHAR(50), IN bid INT)
BEGIN
    IF (bid) IN (SELECT bid FROM book WHERE available > 0) 
            AND (email) IN (SELECT email FROM reservation
                            WHERE status = "N" OR status = "W"
                            GROUP BY email HAVING count(*) < 3) THEN

        INSERT INTO reservation (bid, email) VALUES (bid, email);
        SELECT * FROM reservation WHERE reservation_id = MAX(reservation_id);
    END IF;
END$$
DELIMITER ;

#
# TRIGGERS
#

# Set last login date to current date when creating a user
DROP TRIGGER IF EXISTS init_login_date;
CREATE TRIGGER init_login_date BEFORE INSERT ON user
FOR EACH ROW
SET new.last_login = CURRENT_DATE;

# When a book is checked out, update book count and due date
DROP TRIGGER IF EXISTS checkout;
DELIMITER $$
CREATE TRIGGER checkout BEFORE INSERT ON loan
FOR EACH ROW
BEGIN
    SET new.due_date = ADDDATE(CURRENT_DATE, 7);
    UPDATE book SET available = available - 1 where bid = new.bid;
    UPDATE user SET active_loan = active_loan + 1 where email = new.email;
END$$
DELIMITER ;

# When a return date is set, update book count and reservation
DROP TRIGGER IF EXISTS return_book;
DELIMITER $$
CREATE TRIGGER return_book BEFORE UPDATE ON loan
FOR EACH ROW
BEGIN
    IF old.return_date = NULL AND new.return_date != NULL THEN
        SET new.overdue = FALSE;
        UPDATE book SET available = available + 1 WHERE bid = new.bid;
        UPDATE user SET active_loan = active_loan - 1 WHERE email = new.email;
        UPDATE reservation SET status = "W", avail_date = CURRENT_DATE
            WHERE (email, bid, reserve_date) IN
            (SELECT email, bid, reserve_date FROM reservation 
                WHERE bid = new.bid AND status = "N" 
                AND reservation_id = MIN(reservation_id));
    END IF;
END$$
DELIMITER ;

# Do checks when a reservation is made
DROP TRIGGER IF EXISTS reserve_book;
DELIMITER $$
CREATE TRIGGER reserve_book BEFORE INSERT ON reservation
FOR EACH ROW
BEGIN
    SET new.reserve_date = CURRENT_DATE;

    IF new.bid IN (SELECT bid from book WHERE available > 0) THEN
        SET new.avail_date = CURRENT_DATE;
        SET new.status = "W";
        UPDATE book SET available = available - 1 WHERE bid = new.bid;
    ELSE
        SET new.status = "N";
    END IF;
END$$
DELIMITER ;

# Do checks when a book becomes available
DROP TRIGGER IF EXISTS update_reservation;
DELIMITER $$
CREATE TRIGGER update_reservation BEFORE UPDATE ON reservation
FOR EACH ROW
BEGIN
    IF old.status = "N" AND new.status = "W" THEN
        SET new.avail_date = CURRENT_DATE;
        UPDATE book SET available = available - 1 WHERE bid = new.bid;     
    ELSEIF (old.status = "W" OR old.status = "N") AND new.status = "C" THEN
        UPDATE book SET available = available + 1 WHERE bid = new.bid;
    ELSEIF old.status != "P" AND new.status = "P" THEN
        UPDATE user SET active_loan = active_loan + 1 WHERE email = new.email;
    END IF;
END$$
DELIMITER ;

#
# INITIALIZATION
#

# Set up initial access levels
INSERT INTO user_type values (0, "User");
INSERT INTO user_type values (1, "Librarian");
INSERT INTO user_type values (2, "DBA");
